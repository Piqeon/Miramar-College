section .text
        global _start

_start:
        mov ecx, count
        xor eax, eax 
        lea ebx, [even_numbers]

generate_even_numbers:
        add eax, 2               ; Move to the next even number (0, 2, 4, 6, 8)
        mov [ebx], eax           ; Add the current even number (in EAX) to EBX
        dec ecx
        add ebx 1
        loop generate_even_numbers  ; Loop until ECX is 0

        lea esi, [even_numbers]    ; Load address of even_numbers array into ESI
        mov ecx, count    


find_largest:
    mov bl, [esi]                ; Load the current number from the array into BL
    cmp al, bl                   ; Compare AL (current max) with BL (current number)
    jae skip                     ; If AL >= BL, skip the update
    mov al, bl                   ; Otherwise, update AL with the new maximum
skip:
    add esi, 1                   ; Move to the next number in the array
    loop find_largest            ; Loop until ECX is 0

    ; Store the result
    mov [result], al             ; Store the largest number in the result variable

    mov	eax,1       ;system call number (sys_exit)
    int	0x80 

segment .bss
        result resb 1

section .data
        count db 5;
        even_numbers times 5 db 0
